 (uit grid, nog iets nodig?)
 
 grid(int file){
    }
    
    /*void grida(){
    	grid = new Tile[Arborea.GRID_SIZE][Arborea.GRID_SIZE];    	
    	int middle = (int)Math.ceil(Arborea.GRID_SIZE / 2.0);
    	
    	System.out.println(Arborea.GRID_SIZE + " " + middle);
    	
    	for (int i=0; i < grid.length; i++){
    		if (i < middle) {
    			int amount = Arborea.GRID_SIZE - middle + i+1;
    			//System.out.println(amount);
    			
    			for (int j=0; j<amount;j++){
    				grid[i][j] = new Tile();
    				grid[i][j].x = new Random().nextInt(800);
    				grid[i][j].y = new Random().nextInt(600);
    			}
    			
    		} else {
    			int amount = Arborea.GRID_SIZE + middle - i-1;
    			//System.out.println(amount);
    			
    			for (int j=0; j<amount;j++){
    				grid[i][j] = new Tile();
    				grid[i][j].x = new Random().nextInt(800);
    				grid[i][j].y = new Random().nextInt(600);
    			}
    		}
    	}
    	//for (Tile[] tiles : grid )
    	//	for (Tile tile : tiles ) 
    	//		System.out.println(tile == null);
    }*/
    
    
        void Tilea(){
    	currentFigure = null;
    	
    	x = 5;
    	y = 6;
    	
    }
    
    
    (Painter:)
    
    	//	for (Tile[] tiles : Arborea.grid.grid)
	//		for (Tile tile: tiles)
	//			if (tile != null)
	//				g.drawImage(tile.tileImage,tile.x,tile.y,72,43,this);
	
	(Team:)
	
	    //public void addToFigures(boolean orcTeam, byte type) {
     //   figures.add()
    //}
        https://svia.nl/static/uploads/examinations/NaturalLanguageModelsAndInterfaces_2013.pdf
    https://svia.nl/static/uploads/examinations/LineaireAlgebra_20130226.pdf
    https://svia.nl/static/uploads/examinations/Lineare_Algebra_2014_1.pdf
    
    
    zzzzzzZ
    
    
    1.A
        p(w1)p(w2|w1)...p(wn-1|wn-2)p(wn|wn-1)
    1.B.a
        P(s) * P(c|s) * P(b|c) * P(c|b) * P(b|c) * P(c|b) * P(b|c) * P(/s|b)
        = 1 * 2/3 * 1/2 * 2/6 * 1/2 * 2/6 * 1/2 * 2/3
    1.B.b
        <<s>> , <<s>c> , <cb> , <bc> , <b</s>>
    1.B.c
        1/3 = 4 .
        <s> = 3
        b = 6
        c = 6
        a = 3
        </s> = 3
        n = 3 + 3 + 3 + 6 + 6 = 21
        
        <s> = 1
        </s> = 1
        c = 3
        b = 3
        n = 3 + 3 + 1 + 1 = 8
        
        <s> = 3/21
        b = 6/21
        c = 6/21
        a = 3/21
        </s> = 3/21
        
        
    1.B.d
        <s> c a b c a </s>
        = 3/21 * 6/21 * 3/21 * 6/21 * 6/21 * 3/21 * 3/21
     
        
    2.a
        POS(x) =
            noisy channel {
                insertion
                deletion
                swapping
                replacement
                trashbin.txt.put(x); //syntax error. unexpected ";". possible loss of precision
            }
        ;
    2.b
        f(t) = t
    2.c
        check count(Ta) vs count(Tb)
    2.d
        add1 smoothing. all words will have at least occurence 1.
        deletion is smoothed because no deletions will have occ 0
        
    3.a
        t^n_1 = u^n_1 Â¿Â¿Â¿Â¿Â¿Â¿Â¿Â¿ que ???
    3.b 
        _____________________
        |                 . | 
        |             . .   | 
        |       . . .       | 
        |  . . .            | 
        | .                 |
        |.                  | 
        _____________________
    3.c 3.c
        <s> duck your head </s>
        <s> dont tell me what to do </s>
        
        START gevolgd door N = 0.2
            > START gevolgd door iets anders
        dus we nemen START gevolgd door N
        
        N = duck of head = 0.01
        
        neem
            START , N duck = 0.2 * 0.01
        
        
        van N naar V = 0.2
            > andere
            your =/= V
            
        van N naar END = 0.1
            your =/= /s
        van N naar N = 0.1
            your =/= N
            
        van N naar PPR = 0.001
            your = PPR
            
        PPR = your = 0.2
        
            START , N duck , PPR your = 0.2 * 0.01 * 0.2
        
        
        van PPR naar N = 0.3 > andere
        
        head als N = 0.01
        
        START , N duck , PPR your, N head =
            0.2 * 0.01 * 0.2 * 0.01
        
        
        
        
        
        START gevolgd door V = 0.1
        
        neem START , V
        
        V = duck, head = 0.2
        
        neem
            START , V duck = 0.1 * 0.02
        
        van V naar N = 0.2
            your =/= N
        van V naar V = 0.1
            your =/= v
        van V naar PPR = 0.01 > 0.001
            your = PPR
            
        PPR = your = 0.2
        
            START , V duck , PPR your = 0.1 * 0.02 * 0.2
            
        
        van PPR naar N = 0.3 > andere
        
        head als N = 0.01
        
        START , V duck, PPR your , N head =
            0.1 * 0.02 * 0.2 * 
        
        
        
        whatever
        
        
        
        
        viterbi
        
                <s>     duck    your    head    </s>
        START   1.0     0       0       0       0
        N       0       
        V       0       
        PPR     0
        END     0
        
        
        
        
        
        
    3.d
    
    
    
    4.a
        FIAT 30
        VOL 17
        HOND 15
        MERC 5
        FORD 4
        SAAB 4
        BMW 3
        REN 3
        LEX 3
        HYU 2
        OPE 2
        TATA 2
        VOLV 2
        FER 2
        JAG 1
        PORS 1
        AUD 1
        TRAB 1
        JEEP 1
        SKODA 1
        
        30 + 17 + 15 + 5 + 4 + 4 + 3 + 3 + 3 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 1 + 1 +1 + 1
        = 100
        
        10 types nog niet gezien
        20 al wel gezien
        
        
        N = 100 // aantal gezien
        N1 = 6 // aantal gezien met freq 1
        N0 = 10
        
        kans op unseen = N1 / N
        
        = 0.06
        
        kans op r keer gezien = (r+1)s(Nr+1) / ( N * S(Nr) )
        
        met r = 5
        
        is aantal tm 5 occ = 17
        
        (6 * 17) / (100 * 17 ) .... = 0.06 ..... Â¿
        
        
        10 niet gezien
        10 * 0.06 = 0.6
        
        N = 100
        N * 0.6 = 60
        
        ~60 nog niet gezien
        
        gewoon 6, dikke strikvraag
        
    4.b
        
        r = 4
        
        ( 5 * 17 ) / ( 100 * 16 ) = 0.053125

        P_gt* = 6/100
        C_1* = 2 * N_2 / N_1 = 10/6
        C_2* = 2 * N_3 / N_2 = 6/5
        C_3* = 2 * N_4 / N_3 = 4/3
        C_4* = 2 * N_5 / N_4 = 2/2 = 1 = 3/3 = 5^0 = cos(0) = -e^(i*pi)
        
        
    4.c
        no because you may get numbers that are too big which will give you smaller probabilities when dividing by it (with large corpuses dividing by such a large number will even lead to 0)
        
        
        
    Test.turnIn(myAnswers);
    student.award(muchPrizes);
    this.celebrate();
    
    
    
    
    
    q: Language models as prediction of next words
        why cannot estimate them directly, without making
        approximations?
        
    a:
        because you never have all corpuses, the size
        would be too big. ?
        
    q: What are shortcomings of Markov models and
        RF estimates
        
    a:
        markov are inadequate in describing syntactic structure
        markov is not good at short time interval
        
        hidden markov is very expensive and a lot needs to
        be calculated, especially with viterbi or Forward/Bck
        
        if you have too big rf then you end up dividing by zero
        
    
    
			Figure worstAdjacencyFigureBefore = null;
			Figure worstAdjacencyFigureAfter = null;
			Figure lowestHPFigureBefore = null;
			Figure lowestHPFigureAfter = null;
			int chosenAdjacencyFigure, chosenHPFigure;
			
			Tile tileBefore = Arborea.aiGridStartOfFigureTurn.getTile(attackBefore);
			Figure figureBefore = tileBefore.getFigure();
			Tile tileAfter = Arborea.aiGrid.getTile(attackAfter);
			Figure figureAfter = tileAfter.getFigure();
			
			worstAdjacencyFigureBefore = figureBefore.calculateLowestAdjacencyEnemyFigure(Arborea.aiGridStartOfFigureTurn);
			worstAdjacencyFigureAfter = figureAfter.calculateLowestAdjacencyEnemyFigure(Arborea.aiGrid);
			
			if(worstAdjacencyFigureBefore == null && worstAdjacencyFigureAfter == null) {
				chosenAdjacencyFigure = 0;
			} else if(worstAdjacencyFigureBefore != null && worstAdjacencyFigureAfter == null) {
				chosenAdjacencyFigure = 1;
			} else if(worstAdjacencyFigureBefore == null && worstAdjacencyFigureAfter != null) {
				chosenAdjacencyFigure = 2;
			} else if(worstAdjacencyFigureBefore.calculateAdjacencyBonus(Arborea.aiGridStartOfFigureTurn) < worstAdjacencyFigureAfter.calculateAdjacencyBonus(Arborea.aiGrid)) {
				chosenAdjacencyFigure = 1;
			} else {
				chosenAdjacencyFigure = 2;
			}
			
			lowestHPFigureBefore = calculateLowestHitEnemyFigure(Arborea.aiGridStartOfFigureTurn);
			lowestHPFigureAfter = calculateLowestHitEnemyFigure(Arborea.aiGrid);
			
			if(lowestHPFigureBefore == null && lowestHPFigureAfter == null) {
				chosenHPFigure = 0;
			} else if(lowestHPFigureBefore != null && lowestHPFigureAfter == null) {
				chosenHPFigure = 1;
			} else if(lowestHPFigureBefore == null && lowestHPFigureAfter != null) {
				chosenHPFigure = 2;
			} else if(lowestHPFigureBefore.calculateAdjacencyBonus(Arborea.aiGridStartOfFigureTurn) < lowestHPFigureAfter.calculateAdjacencyBonus(Arborea.aiGrid)) {
				chosenHPFigure = 1;
			} else {
				chosenHPFigure = 2;
			}
			
			if(chosenHPFigure == 1) {
				if(lowestHPFigureBefore.getHitpoints() == 1) {
					//attack this unit first before move
			} else if (chosenHPFigure == 2) {
				if (lowestHPFigureAfter.getHitpoints() == 1)) {
					//atack this unit after move
				}
			}    
			
			
			
			/* ----------------------------------------------------------
 Jelmer Alphenaar 10655751 & Joseph Weel 10321624 - Assignment3
---------------------------------------------------------- */

import java.awt.Color;
import java.awt.Dimension;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

@SuppressWarnings("serial")
public class Texter extends JPanel {
	
	JTextArea ta;
	
	Texter(){
		ta = new JTextArea();
		ta.setColumns(17);
		ta.setLineWrap(true);
		ta.setWrapStyleWord(true);
        
		ta.setEditable(false);
		ta.setFocusable(false);
		ta.setHighlighter(null);
		ta.setBackground(Color.LIGHT_GRAY);
		
		JScrollPane scroll = new JScrollPane (ta, 
				   JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
				   
		this.add(scroll);
		//this.add(ta);
		this.setBackground(Color.LIGHT_GRAY);
	}
	
	void write(String text){
		ta.setText(text);
	}
	
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(Arborea.WINDOW_WIDTH/4,Arborea.WINDOW_HEIGHT);
	}
}



/* ----------------------------------------------------------
 Jelmer Alphenaar 10655751 & Joseph Weel 10321624 - Assignment3
---------------------------------------------------------- */

import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Map.Entry;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

//
class Arborea {
	   
    final static int AMOUNT_SWORD = 6;
    final static int AMOUNT_GENERAL = 3;
    final static int AMOUNT_GOBLIN = 8;
    final static int AMOUNT_ORC = 2;
    
    final static int WINDOW_HEIGHT = 600;
    final static int WINDOW_WIDTH = 800;
    
    final static int GRID_SIZE = 9;
	static final boolean ORCTEAM = true;
	static final boolean MENTEAM = false;
	
	static final String mapFile = "src/maps/characterlocations2";
	//static final String mapFile = "maps/characterlocations2";
    
    // static values to keep track of mouse actions
    static boolean leftClicked = false;
    static boolean rightClicked = false;
    static boolean currentTeamIsOrcs = ORCTEAM;
    static boolean turnEnded = false;
    static boolean menIsAI = false;
    static boolean orcsIsAI = true;
    static boolean orcStarts = false;
    static Point lastClickPoint = new Point(0,0);
    static Point mousePoint = new Point(0,0);
    static Tile selection = null;
    
    // index of AI
    static int indexAI = Figure.AI_RANDOM;
    
    // boolean for when browsing a menu
    static boolean browsingMenu = true;
    
    // boolean for whether or not to play music
    static boolean muteSound = false;
    
    // boolean for showing the intro
    static boolean introduced = false;

    // boolean for finishing the menu
    static boolean finishedMenu = false;
    
    // boolean for the end of the game, and starting anew
    static boolean gameOver = false;
    static boolean playAgain = false;
    
    // boolean for matrix mode
    static boolean enterTheMatrix = false;
    
    // keeps track of the menu for the begin and end of game
    static Menu menu;
    
    // text printed on the Texter [POSSIBLY REMOVE LATER]
    static String text = "";
    
	// this is the window in which everything takes place
	private static Screener screener;	
	
	// a music player and the thread it operates in
	private Thread musicThread;
	private MusicPlayer musicPlayer;

	// 30 frames per second =~ 33.3 milliseconds sleep after each frame. 60 =~ 16.6
	private static final int FRAMERATE = 16;
	
	// The grid with all tiles
    static Grid grid;
    
    // The queue with AI moves and attacks for every character
    static LinkedList<Act> AIQueue;
    
    // boolean over which the main program loops
    private boolean active = true;
    
    // this is the overlying interface, that when constructed sets up other interfaces
    public Arborea(String windowName) {
    	grid = new Grid(mapFile);
    	screener = new Screener(windowName, grid);
        musicPlayer = new MusicPlayer();
        menu = new Menu();
    }
    
    // this is the main function that controls everything
	public void run(){

		while (active) {
			try {
				Thread.sleep(FRAMERATE);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			if (browsingMenu){
				changeMenuState();
			} else {
				changeGameState();		
				if((!currentTeamIsOrcs && menIsAI) || (menIsAI && orcsIsAI) || (currentTeamIsOrcs && orcsIsAI)) {
					handleAIMoves();
					turnEnded = !turnEnded;
				}
			}
			handleClicker();
			screener.repaint();
			screener.rewrite();
		}
		musicThread.interrupt();
	}
	
	// changes the state of the menu
	void changeMenuState(){
		if (!introduced){
			if (menu.finishedIntro()) {
				introduced = true;
				screener.showMenu(true);
				screener.setCanvasBackground(Screener.MENU_COLOR);
			}
		} else {
			if (gameOver){
				if (playAgain){
					grid = new Grid(mapFile);
					gameOver = false;
					playAgain = false;
					screener.showReplayButton(false);
					screener.showMenu(true);
					screener.setCanvasBackground(Screener.MENU_COLOR);
				}				
			} else {
				if (!finishedMenu) return;
				
				if (enterTheMatrix) {
					screener.setCanvasBackground(Screener.SECRET_COLOR);
				} else
					screener.setCanvasBackground(Screener.GAME_COLOR);
				
				//grid = new Grid(mapFile);
				grid.setupSecret();
				
				browsingMenu = false;
				screener.showMenu(false);
				musicPlayer.updateMusicFiles();
		        musicThread = new Thread(musicPlayer);
				musicThread.start();
				
				for (Figure currentFigure : grid.getTeam(currentTeamIsOrcs)) {
					currentFigure.setMoved(false);
					currentFigure.setAttacked(false);
				}
				
				// don't show button if only AI
				if (!menIsAI || !orcsIsAI)
					screener.showTurnButton(true);
			}
		}
	}
	
	// Changes the current game state if necessary
	void changeGameState() {
		if(grid.getTeam(ORCTEAM).isEmpty() || grid.getTeam(MENTEAM).isEmpty()) {
			gameOver = true;
			browsingMenu = true;
			finishedMenu = false;
			musicThread.interrupt();
			screener.showTurnButton(false);
			screener.showReplayButton(true);
			return;
		}		
		if(turnEnded) {			
			for (Figure currentFigure : grid.getTeam(currentTeamIsOrcs)) {
				currentFigure.setMoved(true);
				currentFigure.setAttacked(true);
			}
			for (Figure currentFigure : grid.getTeam(!currentTeamIsOrcs)) {
				currentFigure.setMoved(false);
				currentFigure.setAttacked(false);
			}
			currentTeamIsOrcs = !currentTeamIsOrcs;
			turnEnded = false;		
		}
	}
	
	// handles mouse button input
	void handleClicker(){
		if (browsingMenu){
			//browsingMenu = false;
		} else {
			handleGameClicks();
		}
	}
	
	private void handleGameClicks(){
		Figure figure = null;
		Figure figureAttacked= null;
	    if (leftClicked){
	    	
	    	// handle clicking on the mute/play button
	    	handleMuteClick();
	    	
	    	Tile newSelection = grid.selectTile(lastClickPoint);
	    	
    		if(newSelection != null && newSelection.hasFigure()) {
    			figure = newSelection.getFigure();
    			text = "This figure has " + figure.getHitpoints() + " HP left \n";
    			screener.rewrite();
    		}
    		
	    	if (selection != null){
		        selection.restoreNeighbourImages();   
		        //selection.getFigure().inRange(newSelection.getFigure()) (inRange doesn't work, syntax looks better though)
		        
		        // TODO dude wat is dit voor condition lol
				if( (selection.hasFigure()) && (newSelection != null) && (!newSelection.hasFigure()) && Arrays.asList(selection.getNeighbours()).contains(newSelection) && (selection.getFigure().getTeam() == currentTeamIsOrcs) ) {
		        	figure = selection.getFigure();
		        	if(figure.hasMovesLeft()) {
			        	figure.move(grid, newSelection);
			        	figure.setMoved(true);
		        	}
		        }       
				// De newSelection != null lijkt me in moves/attacks al overbodig, maar kan geen kwaad te checken en eerder te short-circuiten, geldt ook voor de hasFigures?
				if(newSelection != null  && selection.hasFigure() && newSelection.hasFigure() && selection.getFigure().getTeam() == currentTeamIsOrcs && newSelection.getFigure().getTeam() != currentTeamIsOrcs  && Arrays.asList(selection.getNeighbours()).contains(newSelection)) {
					figure = selection.getFigure();
					figureAttacked = newSelection.getFigure();
					if(figure.hasAttacksLeft()) {
						figure.attack(grid, figureAttacked, true);
						figure.setAttacked(true);
					}		
				}
	    	}	    	
	    	
	        if (newSelection != null && newSelection.hasFigure() && (newSelection.getFigure().getTeam() == currentTeamIsOrcs)) {
		        newSelection.changeNeighbourImages(grid);
	        }
	        
	        selection = newSelection;			
	        leftClicked = false;
	    }
	    if (rightClicked){
	        rightClicked = false;
	    }
	    // DEBUG v
	    text = lastClickPoint.x + "," + lastClickPoint.y
		 + "\n" + mousePoint.x + "," + mousePoint.y;
		 
		 if (selection != null) {
		     text += "\n" + "Selected : " + selection.toString();
		 }

		 text += "\n\n";
		for (Entry<Point, Tile> entry : grid.tiles.entrySet()){
		    Tile t = entry.getValue();
		    text += t.toString() + t.pixelCoords.x + "," + t.pixelCoords.y + "\n"; 
		}
		// END DEBUG ^
	}
	
	private void handleMuteClick(){
		if (leftClicked && lastClickPoint.x >= 700 && lastClickPoint.x <= 760 && lastClickPoint.y >= 20 && lastClickPoint.y <= 80) {
			if (muteSound){
				musicThread = new Thread(musicPlayer);
				musicThread.start();
			} else {
				musicThread.interrupt();
			}
			muteSound = !muteSound;
		}
	}
	
	//attack when possible if it has a good outcome (you have high adjacency and other guy doesnt or he has 1 hp left)
	//if(above prox threshold, go closer to average location of teammates)
		//if still attack left, check to attack again (should compare best attack before and after and pick best one)
	//else go closer to enemy
		//if attack left try attack (lowest character pref. (or maybe the general if on orc team)) (should compare best attack before and after and pick best one)	
	private void handleAIMoves() {
		LinkedList<Act> ai = new LinkedList<Act>();
		Tile moveTile = null;
		Tile attackTileBefore = null;
		Tile attackTileAfter = null;
		Figure attackedFigure;
		double threshold = 2;
		
		Random random = new Random();
		long seed = System.nanoTime();
		random.setSeed(seed);
		
		// because of concurrent modification, using a COW-list
		CopyOnWriteArrayList<Figure> allFiguresOfTeam = new CopyOnWriteArrayList<Figure>();;
		for (Figure f : grid.getTeam(currentTeamIsOrcs))
			allFiguresOfTeam.add(f);
		
		Collections.shuffle(allFiguresOfTeam, random); //TODO use 1 Random object, setSeed
		ArrayList<Act> allAICurrentFigure = new ArrayList<Act>();

		for (Figure currentFigure : allFiguresOfTeam) {
			
			switch(Arborea.indexAI) {
				case Figure.AI_RANDOM:
					Random randomAI = new Random();
					ArrayList<Tile> neighboursMoveable = currentFigure.getAllMoveableTiles(grid);
					int randomIndex;
					if(neighboursMoveable.size() != 0 ) {
						randomIndex = randomAI.nextInt(neighboursMoveable.size());
						moveTile = grid.getTile(neighboursMoveable.get(randomIndex).getLocation());
					}
					ArrayList<Tile> neighboursAttackable = currentFigure.getAllAttackableTiles(grid);
					if(neighboursAttackable.size() != 0) {
						randomIndex = randomAI.nextInt(neighboursAttackable.size());
						attackTileBefore = grid.getTile(neighboursAttackable.get(randomIndex).getLocation());
					}
					Act randomAIAct = new Act();
					randomAIAct.setSelectedTile(grid.getTile(currentFigure.getLocation()));
					randomAIAct.setMovingTile(moveTile);
					randomAIAct.setAttackTileBefore(attackTileBefore);
					break;
				case Figure.AI_TRUE:
					allAICurrentFigure = currentFigure.getAllPossibleActs();
					Act chosenAI = currentFigure.calculateBestMove(allAICurrentFigure, currentFigure.isNextMoveOffensive(grid, threshold));
					ai.add(chosenAI);
					attackTileBefore = chosenAI.getAttackTileBefore();
					moveTile = chosenAI.getMovingTile();
					attackTileAfter = chosenAI.getAttackTileAfter();
					break;
			}	
			if(attackTileBefore != null) {
				attackedFigure = attackTileBefore.getFigure();
				currentFigure.attack(grid, attackedFigure, true);
			}
			if(moveTile != null) {

				currentFigure.move(grid, moveTile);
				currentFigure.setMoved(true);
			}
			if(attackTileAfter != null) {
				attackedFigure = attackTileAfter.getFigure();
				currentFigure.attack(grid, attackedFigure, true);
			}
		}

//		try {
//			Thread.sleep(50);
//		} catch (InterruptedException e) {
//			// 
//		}
	}
}

				//attack when possible if it has a good outcome (you have high adjacency and other guy doesnt or he has 1 hp left)
	//if(above prox threshold, go closer to average location of teammates)
		//if still attack left, check to attack again (should compare best attack before and after and pick best one)
	//else go closer to enemy
		//if attack left try attack (lowest character pref. (or maybe the general if on orc team)) (should compare best attack before and after and pick best one)	
			